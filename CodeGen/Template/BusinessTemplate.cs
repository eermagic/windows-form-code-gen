// ------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本: 17.0.0.0
//  
//     變更這個檔案可能會導致不正確的行為，而且如果已重新產生
//     程式碼，則會遺失變更。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGen.Template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class BusinessTemplate : BusinessTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using ProjectLibrary.Base;\r\nusing ProjectLibrary.DB;\r\nusing System.Data;\r\nusing S" +
                    "ystem.Dynamic;\r\nusing System.Text;\r\n\r\nnamespace TeachAnnouncement.Business\r\n{\r\n " +
                    "   public class Bus");
            
            #line 14 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" : BusinessBase\r\n    {\r\n        #region 建構子\r\n        public Bus");
            
            #line 17 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("(DBManager _dbManager) : base(_dbManager)\r\n        {\r\n\r\n        }\r\n        #endre" +
                    "gion\r\n\r\n        #region 方法\r\n        /// <summary>\r\n        /// 取得");
            
            #line 25 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        public DataTab" +
                    "le Get");
            
            #line 28 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            StringBuilder sql = new StringBuilder();\r\n\r\n          " +
                    "  sql.Append(\"SELECT M.* \");\r\n            sql.Append(\"FROM ");
            
            #line 33 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" M \");\r\n            sql.Append(\"WHERE 1=1 \");\r\n\r\n            StringBuilder sbWher" +
                    "e = new StringBuilder();\r\n            dynamic param = new ExpandoObject();\r\n\r\n  " +
                    "          // 動態組合 SQL 條件\r\n");
            
            #line 40 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"

    string KeyColumn = "";
    foreach (ColumnModel columnModel in Columns)
    {
        if (string.IsNullOrEmpty(columnModel.CONSTRAINT_NAME) == false)
        {
            if (KeyColumn!=""){
			    KeyColumn += ",";
		    }
		    KeyColumn += columnModel.COLUMN_NAME;
            
            
            #line default
            #line hidden
            this.Write("            GenWhere(sbWhere, param, \"");
            
            #line 51 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnModel.COLUMN_NAME));
            
            #line default
            #line hidden
            this.Write("\", \"=\", ");
            
            #line 51 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnModel.COLUMN_NAME));
            
            #line default
            #line hidden
            this.Write(");\r\n            ");
            
            #line 52 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"

        }
    }

            
            #line default
            #line hidden
            this.Write("\r\n            sql.Append(sbWhere);\r\n            sql.Append(\"ORDER BY ");
            
            #line 58 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeyColumn));
            
            #line default
            #line hidden
            this.Write("\");\r\n\r\n            // 執行查詢\r\n            DataTable dt = dbManager.GetData(sql.ToSt" +
                    "ring(), param, PageNo, PageSize, ref TotalRowCount);\r\n            ResetColumn();" +
                    "\r\n            return dt;\r\n        }\r\n\r\n        /// <summary>\r\n        /// 新增");
            
            #line 67 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        public int Ins" +
                    "ert");
            
            #line 70 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            StringBuilder sbColumn = new StringBuilder();\r\n       " +
                    "     StringBuilder sbValue = new StringBuilder();\r\n            dynamic param = n" +
                    "ew ExpandoObject();\r\n\r\n            // 動態組合 SQL 欄位\r\n");
            
            #line 77 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"

    foreach (ColumnModel columnModel in Columns)
    {
            
            
            #line default
            #line hidden
            this.Write("            GenInsert(sbColumn, sbValue, param, \"");
            
            #line 81 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnModel.COLUMN_NAME));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 81 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnModel.COLUMN_NAME));
            
            #line default
            #line hidden
            this.Write(");\r\n            ");
            
            #line 82 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write("\r\n            // 執行新增\r\n            int cnt = dbManager.Insert(\"");
            
            #line 87 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("\", sbColumn.ToString(), sbValue.ToString(), param);\r\n            ResetColumn();\r\n" +
                    "            return cnt;\r\n        }\r\n\r\n        /// <summary>\r\n        /// 修改");
            
            #line 93 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        public int Upd" +
                    "ate");
            
            #line 96 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            StringBuilder sbColumn = new StringBuilder();\r\n       " +
                    "     StringBuilder sbWhere = new StringBuilder();\r\n            dynamic param = n" +
                    "ew ExpandoObject();\r\n\r\n            // 動態組合 SQL 欄位\r\n");
            
            #line 103 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"

    foreach (ColumnModel columnModel in Columns)
    {
        if (string.IsNullOrEmpty(columnModel.CONSTRAINT_NAME) == true)
        {
            
            
            #line default
            #line hidden
            this.Write("            GenUpdate(sbColumn, param, \"");
            
            #line 109 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnModel.COLUMN_NAME));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 109 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnModel.COLUMN_NAME));
            
            #line default
            #line hidden
            this.Write(");\r\n            ");
            
            #line 110 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"

        }
    }

            
            #line default
            #line hidden
            this.Write("\r\n            // 動態組合 SQL 條件\r\n");
            
            #line 116 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"

    foreach (ColumnModel columnModel in Columns)
    {
        if (string.IsNullOrEmpty(columnModel.CONSTRAINT_NAME) == false)
        {
            
            
            #line default
            #line hidden
            this.Write("            GenWhere(sbWhere, param, \"");
            
            #line 122 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnModel.COLUMN_NAME));
            
            #line default
            #line hidden
            this.Write("\", \"=\", ");
            
            #line 122 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnModel.COLUMN_NAME));
            
            #line default
            #line hidden
            this.Write(");\r\n            ");
            
            #line 123 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"

        }
    }

            
            #line default
            #line hidden
            this.Write("\r\n            // 執行修改\r\n            int cnt = dbManager.Update(\"");
            
            #line 129 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("\", sbColumn.ToString(), sbWhere.ToString(), param);\r\n            ResetColumn();\r\n" +
                    "            return cnt;\r\n        }\r\n\r\n        /// <summary>\r\n        /// 刪除");
            
            #line 135 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        public int Del" +
                    "ete");
            
            #line 138 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            StringBuilder sbWhere = new StringBuilder();\r\n        " +
                    "    dynamic param = new ExpandoObject();\r\n\r\n            // 動態組合 SQL 條件\r\n");
            
            #line 144 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"

    foreach (ColumnModel columnModel in Columns)
    {
        if (string.IsNullOrEmpty(columnModel.CONSTRAINT_NAME) == false)
        {
            
            
            #line default
            #line hidden
            this.Write("            GenWhere(sbWhere, param, \"");
            
            #line 150 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnModel.COLUMN_NAME));
            
            #line default
            #line hidden
            this.Write("\", \"=\", ");
            
            #line 150 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnModel.COLUMN_NAME));
            
            #line default
            #line hidden
            this.Write(");\r\n            ");
            
            #line 151 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"

        }
    }

            
            #line default
            #line hidden
            this.Write("\r\n            // 執行修改\r\n            int cnt = dbManager.Delete(\"");
            
            #line 157 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("\", sbWhere.ToString(), param);\r\n            ResetColumn();\r\n            return cn" +
                    "t;\r\n        }\r\n        #endregion\r\n\r\n        #region 欄位\r\n");
            
            #line 164 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"

    foreach (ColumnModel columnModel in Columns)
    {
        
            
            #line default
            #line hidden
            this.Write("        public object ");
            
            #line 168 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnModel.COLUMN_NAME));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            get { return htColumn[\"");
            
            #line 170 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnModel.COLUMN_NAME));
            
            #line default
            #line hidden
            this.Write("\"]; }\r\n            set { htColumn[\"");
            
            #line 171 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnModel.COLUMN_NAME));
            
            #line default
            #line hidden
            this.Write("\"] = value; }\r\n        }\r\n\r\n        ");
            
            #line 174 "D:\Project\Teach\TeachAnnouncement\CodeGen\Template\BusinessTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write("        #endregion\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class BusinessTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
